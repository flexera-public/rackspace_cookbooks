{
  "long_description": "# Description\n\nThis cookbook provides automated way to manage the various resources using the Rackspace Cloud Monitoring API.\nSpecifically this recipe will focus on main atom's in the system.\n\n* Entities\n* Checks\n* Alarms\n* Agents (soon)\n* Agent Tokens (soon)\n\nThe cookbook also installs the python-pip package in Debian and RedHat based systems, and then uses pip to install the Rackspace Cloud Monitoring client, raxmon-cli, via pip\n\nThe raxmon-cli recipe in this cookbook is not automatically added by default.  To install raxmon-cli, add the cloud_monitoring::raxmon recipe to the run_list. \n\nTo run this recipe manually from a managed cloud server use the following command:\n\n$ ./mgc.sh --recipe \"cloudmonitoring\" --json '\"cloud_monitoring\" : { \"bootstrapfile\" : \"/etc/raxmon/bootstrap.json\", \"rackspace_username\" : \"cloudusername\", \"rackspace_api_key\" : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}' --force\n\n# Requirements\n\n## Supported OS (Rackspace Managed Cloud)\n\n* RHEL 5.5\n* RHEL 6.1\n* CentOS 5.6\n* CentOS 6.3\n* Ubuntu 10.04\n* Ubuntu 11.04\n* Ubuntu 11.10\n* Ubuntu 12.04\n\nRequires Chef 0.7.10 or higher for Lightweight Resource and Provider support. Chef 0.8+ is recommended. While this\ncookbook can be used in chef-solo mode, to gain the most flexibility, we recommend using chef-client with a Chef Server.\n\n## Library Requirements\n\nThe inner workings of the library depend on [fog](https://github.com/fog/fog) which is used by the Ruby command line\nclient called [rackspace-monitoring-rb](https://github.com/racker/rackspace-monitoring-rb).  These are handled in the\ninstantiation and use of the Cookbook.\n\nA Rackspace Cloud Hosting account is required to use this tool.  And a valid `username` and `api_key` are required to\nauthenticate into your account.\n\nYou can get one here [sign-up](https://cart.rackspace.com/cloud/?cp_id=cloud_monitoring).\n\n### Raxmon Requirements\n\npython and python-pip (installed by this cookbook) for the raxmon-cli install\n\n### General Requirements\n* You need to either set the attributes for your Rackspace username and api key in attributes/default.rb or create an encrypted data bag per the following setup steps:\n\n## Setup\n\nTake either step depending on your databag setup.\n\n### I already have an encrypted_data_bag_secret file created and pushed out to your chef nodes\n\n* Create the new encrypted data_bag\nknife data bag create --secret-file <LOCATION/NAME OF SECRET FILE>  rackspace cloud\n\n* Make the json file opened look like the following, then save and exit your editor:\n```\n{\n  \"id\": \"cloud\",\n  \"username\": \"<YOUR CLOUD SERVER USERNAME>\",\n  \"apikey\": \"<YOUR CLOUD SERVER API KEY>\",\n  \"region\": \"<YOUR ACCOUNT REGION (us OR uk)>\"\n}\n```\n\n### I don't use an encrypted_data_bag_secret file\n* Create a new secret file\n`$ openssl rand -base64 512 | tr -d '\\r\\n' > /tmp/my_data_bag_key`\n\n* The `/tmp/my_data_bag_key` (or whatever you called it in the above step) needs to be pushed out to your chef nodes to `/etc/chef/encrypted_data_bag_secret`\n\n* Create the new encrypted data_bag\n`$ knife data bag create --secret-file /tmp/my_data_bag_key rackspace cloud`\n\n* Make the json file opened look like the following, then save and exit your editor:\n```\n{\n  \"id\": \"cloud\",\n  \"username\": \"<YOUR CLOUD SERVER USERNAME>\",\n  \"apikey\": \"<YOUR CLOUD SERVER API KEY>\",\n  \"region\": \"<YOUR ACCOUNT REGION (us OR uk)>\"\n}\n```\n\n# Attributes\n\nAll attributes are namespaced under the `node['cloud_monitoring']` namespace.  This keeps everything clean and organized.\n\nThe following attributes are required, either in attributes/default.rb or an encrypted data bag called rackspace with an item of cloud:\n\n* `node['cloud_monitoring']['rackspace_username']`\n* `node['cloud_monitoring']['rackspace_api_key']`\n* `node['cloud_monitoring']['rackspace_auth_region']`\n  * This must be set to either 'us' or 'uk', depending on where your account was created\n\n# Usage\n\nThis cookbook exposes many different elements of the Cloud Monitoring product. We'll go over some examples and best\npractices for using this cookbook. The most widely used parts of the system are the three core Resources in the system `Entity`, `Check` and `Alarm`. So we'll cover those first and tackle The other primitives towards the end.\n\n## Entity\n\nThe first element is the `Entity`.  The `Entity` maps to the target of what you're monitoring.  This in most cases\nrepresents a server, loadbalancer or website.  However, there is some advanced flexibility but that is only used in rare cases. The first use case we will show is populating your chef nodes in Cloud Monitoring...\n\nLearn more about all these concepts in the docs and specifically the\n[Concepts](http://docs.rackspacecloud.com/cm/api/v1.0/cm-devguide/content/concepts-key-terms.html) section of the\ndeveloper guide.\n\n```ruby\ncloud_monitoring_entity \"#{node.hostname}-manual\" do\n  ip_addresses        'default' => node[:ipaddress]\n  metadata            'environment' => 'dev', :more => 'meta data'\n  rackspace_username  'joe'\n  rackspace_api_key   'XXX'\n  action :create\nend\n```\nUpon execution of this code, if you viewed the `/entities` API call you would see an `Entity` labeled whatever the hostname of the machine.\n\nMost of the fields are optional, you can even specify something as minimal as:\n\n```ruby\ncloud_monitoring_entity \"#{node.hostname}\" do\n  rackspace_username  'joe'\n  rackspace_api_key   'XXX'\n  action :create\nend\n```\n\nThis operation is idempotent, and will select the node based on the name of the resource, which maps to the label of the\nentity.  This is ***important*** because this pattern is repeated through out this cookbook.  If an attribute of the\nresource changes the provider will issue a `PUT` instead of a `POST` to update the resource instead of creating another\none.\n\nThis will set an attribute on the node `node[:cloud_monitoring][:entity_id]`.  This attribute will be saved in the\nchef server.  It is bi-directional, it can re-attach your cloud monitoring entities to your chef node based on the\nlabel.  Keep in mind nothing is removed unless explicitly told so, like most chef resources.\n\n\n## Check\n\nThe check is the way to start collecting data.  The stanza looks very similar to the `Entity` stanza except the accepted\nparameters are different, it is seen more as the \"what\" of monitoring.\n\n***Note: you must either have the attribute assigned `node[:cloud_monitoring][:entity_id]` or pass in an entity_id\nexplicitly so the Check knows which node to create it on.***\n\nHere is an example of a ping check:\n\n```ruby\ncloud_monitoring_check  \"ping\" do\n  target_alias          'default'\n  type                  'remote.ping'\n  period                30\n  timeout               10\n  monitoring_zones_poll ['mzord']\n  rackspace_username    'joe'\n  rackspace_api_key     'XXX'\n  action :create\nend\n```\n\nThis will create a ping check that is scoped on the `Entity` that was created above.  In this case, it makes sense,\nhowever sometimes you want to be specific about which node to create this check on.  If that's the case, then passing in\nan `entity_id` will allow you to do that.\n\nThis block will create a ping check named \"ping\" with 30 second interval from a single datacenter \"mzord\".  It will\nexecute the check against the target_alias default, which is the chef flagged ipaddress above.\n\nCreating a more complex check is just as simple, take HTTP check as an example.  There are multiple options to pass in\nto run the check. This maps very closely to the API, so you have a details hash at your disposal to do that.\n\n```ruby\ncloud_monitoring_check  \"http\" do\n  target_alias          'default'\n  type                  'remote.http'\n  period                30\n  timeout               10\n  details               'url' => 'http://www.google.com', 'method' => 'GET'\n  monitoring_zones_poll ['mzord', 'mzdfw']\n  rackspace_username    'joe'\n  rackspace_api_key     'XXX'\n  action :create\nend\n```\n\n## Alarm\n\nThe `Alarm` is the way to specify a threshold in Cloud Monitoring and connect that to sending an alert to a customer.\nWithout an `Alarm` a user would never receive an alert based on a failure, warning or success.  An `Alarm` is scoped on\nan entity and points to a check id or a check type.\n\nAn Alarm state is the combination of a Check + Alarm + Dimension.  Dimensions are additional complexity which I won't go\ninto here but they allow you arbitrarily nest information from the edge.\n\nAlarms in the public API take a couple critical fields.  A notification plan id and a \"criteria\".  The notification plan\nid points at a notification plan to execute upon a state transitioning.  The criteria describes the conditions to\ngenerate an alert.\n\nThere are some guides describing how to best threshold for certain events, and there is also a built in alarm examples\nAPI that is very powerful.  This [Alarm Examples\nAPI](http://docs.rackspacecloud.com/cm/api/v1.0/cm-devguide/content/service-alarm-examples.html) is exposed in this\nrecipe indirectly through the alarm `cloud_monitoring_alarm` stanza.  Look at an example below:\n\n```ruby\ncloud_monitoring_alarm  \"ping alarm\" do\n  check_label           'ping'\n  example_id            'remote.ping_packet_loss'\n  notification_plan_id  'npBLAH'\n  action :create\nend\n```\n\nThis is a creating an alarm that checks for ping packet loss, if we look at a snippet from the JSON payload of the\nalarm_examples API it looks something like this...\n\n```javascript\n...\n    {\n        \"id\": \"remote.ping_packet_loss\",\n        \"label\": \"Ping packet loss\",\n        \"description\": \"Alarm which returns WARNING if the packet loss is greater than 5% and CRITICAL if it's greater than 20%\",\n        \"check_type\": \"remote.ping\",\n        \"criteria\": \"if (metric['available'] < 80) {\\n  return CRITICAL, \\\"Packet loss is greater than 20%\\\"\\n}\\n\\nif (metric['available'] < 95) {\\n  return WARNING, \\\"Packet loss is greater than 5%\\\"\\n}\\n\\nreturn OK, \\\"Packet loss is normal\\\"\\n\",\n        \"fields\": []\n    }\n...\n```\n\n\nThere is templating capability in the alarm_examples API call so if I were to use an example that would require this\nfunctionality, I could specify `example_values` which would template the call.\n\nBelow is a new example of a templated alarm example as applied to an SSH check.\n\n```javascript\n...\n    {\n        \"id\": \"remote.ssh_fingerprint_match\",\n        \"label\": \"SSH fingerprint match\",\n        \"description\": \"Alarm which returns CRITICAL if the SSH fingerprint doesn't match the provided one\",\n        \"check_type\": \"remote.ssh\",\n        \"criteria\": \"if (metric['fingerprint'] != \\\"${fingerprint}\\\") {\\n  return OK, \\\"SSH fingerprint didn't match the expected one ${fingerprint}\\\"\\n}\\n\\nreturn OK, \\\"Got expected SSH fingerprint (${fingerprint})\\\"\\n\",\n        \"fields\": [\n            {\n                \"name\": \"fingerprint\",\n                \"description\": \"Expected SSH fingerprint\",\n                \"type\": \"string\"\n            }\n        ]\n    },\n...\n```\n\nHere is the corresponding check.\n\n```ruby\ncloud_monitoring_check  \"ssh check name\" do\n  target_alias          'default'\n  type                  'remote.ssh'\n  period                30\n  timeout               10\n  monitoring_zones_poll ['mzord']\n  action :create\nend\n```\n\nAnd the alarm, notice the example_values hash.\n\n\n```ruby\ncloud_monitoring_alarm  \"ssh alarm\" do\n  check_label           'ssh check name'\n  example_id            'remote.ssh_fingerprint_match'\n  example_values        \"fingerprint\" => node[:ssh][:fingerprint]\n  notification_plan_id  'npBLAH'\n  action :create\nend\n```\n\nYou'll also notice the check_label reference doesn't exist in the API, but the cookbook makes this much easier to\nconnect to other related objects.\n\n\nIf you wanted to use your own threshold then you could specify criteria in the alarm block.\n\n```ruby\ncloud_monitoring_alarm  \"ping alarm\" do\n  check_label           'ping'\n  criteria              \"if (metric['available'] < 100) { return CRITICAL, 'Availability is at ${available}' }\"\n  notification_plan_id  'npBLAH'\n  action                :create\nend\n```\n\n",
  "version": "0.1.5",
  "recommendations": {
  },
  "groupings": {
  },
  "conflicting": {
  },
  "dependencies": {
  },
  "name": "managed-cloud-cloudmonitoring",
  "replacing": {
  },
  "recipes": {
  },
  "suggestions": {
  },
  "attributes": {
  },
  "maintainer_email": "product@rackspace.com",
  "providing": {
  },
  "license": "Apache 2.0",
  "description": "Installs/Configures Rackspace Cloud Monitoring",
  "platforms": {
  },
  "maintainer": "Rackspace"
}